create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
create_new_plot <- function(input_data,input_metadata,factor_to_test,pathway,plot.title=NULL) {
plotout <- ggplot(input_data,aes(x=input_metadata[,factor_to_test],y=input_data[,pathway],fill=input_metadata[,factor_to_test])) +
geom_jitter(width=0.15) +
geom_boxplot(alpha=0.45,outlier.shape = NA) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.title = element_text(size=rel(0.75)),
plot.title = element_text(size=rel(0.95))) +
labs(x=factor_to_test,y=lookup_table$Pathway[lookup_table$pathwayid == pathway],
title=plot.title) +
scale_fill_brewer(palette = "Spectral") +
guides(fill=F)
return(plotout)
}
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
lookup_table
lookup_table = lookup_table.all[["pathway_abund"]]
factor_to_test_to_use="Visit_Number"
pathway_to_use="pathway212"
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="NR" & !is.na(meta[,factor_to_test_to_use])
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
lookup_table = lookup_table.all[["pathway_abund"]]
factor_to_test_to_use="Visit_Number"
pathway_to_use="pathway212"
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="NR" & !is.na(meta[,factor_to_test_to_use])
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)","PF-06651600 70 mg (Induction)","PF-06651600 20 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="R" !is.na(meta[,factor_to_test_to_use])
# i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="NR" & !is.na(meta[,factor_to_test_to_use])
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)","PF-06651600 70 mg (Induction)","PF-06651600 20 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="R" !is.na(meta[,factor_to_test_to_use])
# i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="NR" & !is.na(meta[,factor_to_test_to_use])
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)","PF-06651600 70 mg (Induction)","PF-06651600 20 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="R" !is.na(meta[,factor_to_test_to_use])
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)","PF-06651600 70 mg (Induction)","PF-06651600 20 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="R" & !is.na(meta[,factor_to_test_to_use])
# i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="NR" & !is.na(meta[,factor_to_test_to_use])
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
meta
meta[,factor_to_test_to_use]
sum(is.na(meta[,factor_to_test_to_use]))
table(is.na(meta[,factor_to_test_to_use]))
table((meta[,factor_to_test_to_use]))
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
lookup_table = lookup_table.all[["pathway_abund"]]
factor_to_test_to_use="Visit_Number"
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)","PF-06651600 70 mg (Induction)","PF-06651600 20 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="R" & !is.na(meta[,factor_to_test_to_use])
# i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="NR" & !is.na(meta[,factor_to_test_to_use])
pathway_to_use="pathway212"
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
pathway_to_use="pathway485"
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
pathway_to_use="pathway296"
create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
g1 = create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
lookup_table = lookup_table.all[["pathway_abund"]]
factor_to_test_to_use="Visit_Number"
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)","PF-06651600 70 mg (Induction)","PF-06651600 20 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="R" & !is.na(meta[,factor_to_test_to_use])
# i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="NR" & !is.na(meta[,factor_to_test_to_use])
pathway_to_use="pathway212"
g1 = create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
pathway_to_use="pathway485"
g2=create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
pathway_to_use="pathway296"
g3 = create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
library(cowplot)
plot_grid(g1,g2,g3)
plot_grid(g1,g2,g3,ncol=3)
dataType="EC"
path_to_data="~/Documents/Research/pfizer/data"
path_to_outputDir="~/Documents/Research/pfizer/results_v2"
remove_species_specific=TRUE
remove_enteromeQC=TRUE
taxa_genus_specific=TRUE
min_abundance=0
min_prevalence=0.1
#######################################################
# SCRIPT BEGINS:
print(paste0("Running script for: ",dataType))
#######################################################
system(paste0("mkdir -p ",path_to_outputDir))
# path_to_outputDir <- paste0(path_to_outputDir,'/',dataType)
system(paste0("mkdir -p ",path_to_outputDir,'/NONE/',dataType))
system(paste0("mkdir -p ",path_to_outputDir,'/LOGIT/',dataType))
########################################################
# IMPORT DATA INTO R:
#######################
# Using real data:
meta.full <- load(paste0(path_to_data,"/meta_clin_data_JAK3TEC_PBO.RData"))
# meta.full
# dat.path <- load("~/Documents/Research/pfizer/data/B7981005_UC_l4ec_merged_result_JAK3TEC_PBO.RData")
if (dataType=="taxa") {
dat.path <- load(paste0(path_to_data,"/B7981005_UC_taxonomy_abundance_table_JAK3TEC_PBO.RData"))
} else if (dataType=="EC") {
dat.path <- load(paste0(path_to_data,"/B7981005_UC_l4ec_merged_result_JAK3TEC_PBO.RData"))
} else if (dataType=="pathway_abund") {
dat.path <- load(paste0(path_to_data,"/B7981005_UC_pathabundance_merged_result_JAK3TEC_PBO.RData"))
} else if (dataType=="pathway_cover") {
dat.path <- load(paste0(path_to_data,"/B7981005_UC_pathcoverage_merged_result_JAK3TEC_PBO.RData"))
} else if (dataType=="gene") {
dat.path <- load(paste0(path_to_data,"/B7981005_UC_genefamilies_merged_result_JAK3TEC_PBO.RData"))
}
# dat.path
if (dataType=="taxa") {
datin_sel <- datin_sel[,c(1,(grep("Hu",colnames(datin_sel))[1]):ncol(datin_sel))]
}
dim(meta_dat_sm_sel2)
dim(datin_sel)
meta.full <- meta_dat_sm_sel2
dat.path <- datin_sel
########################################################
# HUMANN3 PRE-PROCESSING:
# rename data
dat.path <- dat.path %>%
dplyr::rename(Pathway = colnames(datin_sel)[1])
colnames(dat.path) <- gsub('_merged_Abundance.RPKs','',colnames(dat.path))
colnames(dat.path) <- colnames(dat.path) %>%
word(sep = "_") %>%
str_replace("S-","") %>%
str_replace("-","_") %>%
paste0("smp",.)
dat0 <- dat.path %>%
dplyr::rename(Pathway = smpPathway)
# 1. filter to community level (not single-species)
# 2. create a "Total" column
# 3. remove unmapped/ungrouped reads
# 4. remove pathways with 0 abundance (shouldn't exist though, only would appear if samples were removed)
if (dataType !="taxa" & remove_species_specific) {
dat0 <- dat0 %>%
filter(!grepl("\\|",Pathway)) # this step filters out all species level pathway abundances, so that we ignore species specific estimates
} else if (dataType == "taxa" & taxa_genus_specific) {
dat0 <- dat0 %>% filter(grepl("g__",Pathway)) %>% filter(!grepl("s__",Pathway))
}
dat0 <- dat0 %>%
mutate(Total = dplyr::select(.,-Pathway) %>% rowSums(na.rm = TRUE)) %>% # create a column "Total" which represents total abundance
filter(!grepl("UNMAPPED|UNINTEGRATED|UNGROUPED",Pathway)) %>%
filter(Total !=0) # filter pathways with 0 abundance
# transpose matrix for analysis
# & save pathway label to name table
dat0 <- dat0 %>% mutate(pathwayid = paste0("pathway",1:nrow(dat0)))
pathway_lookup_table <- (dat0[,c("pathwayid","Pathway","Total")])
dat0 <- dat0 %>%
select(-Pathway,-Total) %>%
# select(-Pathway) %>%
relocate(pathwayid) %>%
t
colnames(dat0) <- dat0[1,]
dat0 <- dat0[-1,]
dat1 <- apply(dat0, 2,function(x) as.numeric(as.character(x)))
rownames(dat1) <- rownames(dat0)
rm(dat0) # to keep tidy
fwrite(pathway_lookup_table,paste0(path_to_outputDir,'/NONE/',dataType,"/lookup_table.txt"),quote = F,na = "NA",sep = '\t',row.names = F,col.names = T)
fwrite(pathway_lookup_table,paste0(path_to_outputDir,'/LOGIT/',dataType,"/lookup_table.txt"),quote = F,na = "NA",sep = '\t',row.names = F,col.names = T)
########################################################
# METADATA PRE-PROCESSING:
meta <- meta.full
meta$SAMPID <- paste0("smp",meta$SMID2)
rownames(meta) <- meta$SAMPID
meta$NOT_WHITE <- meta$RACE != "WHITE"
########################################################
# METADATA-METAGENOMIC INTEGRATION
# organize meta and dat1 to have same row/cols
# however: this is not needed for Maaslin2 to be performed correctly!
i <- match(rownames(dat1),meta$SAMPID); meta <- meta[i,] # merging METADATA and HUMANN3 data
which(meta[,'SAMPID']!=rownames(dat1)) # sanity check
if (remove_enteromeQC) {i <- (meta$qc_status=="Pass"); meta <- meta[i,]; dat1 <- dat1[i,]} # remove enterome QC
########################################################
# transformation
# if (dataType=="taxa") {
#         max_count=100
# } else {
#         max_count=1
# }
# x <- dat1[,1]
#
# logit_transform <- function(x) {
#         x <- x + (min(x[x!=0])/2) # add pseudocount
#         x_trans <- log(x/(max_count-x))
#         return(x_trans)
# }
# Mann whitney test function for statistical testing
mann_whitney_testing <- function(unfiltered_data,factor_to_test='EI',analysisType="baseline",is_data_filtered=FALSE,min_abundance=0.0001,min_prevalence=0.1,direc_addon="",write_new_file=TRUE) {
if (!is_data_filtered) {
print("Begin data filtering...")
total_samples=nrow(unfiltered_data)
min_prevalence=min_prevalence
min_abundance=min_abundance
min_samples <- total_samples * min_prevalence
# Filter by abundance using zero as value for NAs
data_zeros <- unfiltered_data
data_zeros[is.na(data_zeros)] <- 0
##
filtered_data <-
unfiltered_data[,
colSums(data_zeros > min_abundance) > min_samples,
drop = FALSE]
} else {
filtered_data <- unfiltered_data
}
print(paste0("Running Mann-Whitney..."))
pval <- list(); pathwayNum=0; for (pathway in colnames(filtered_data)) {
pathwayNum <- pathwayNum + 1
if (pathwayNum %% 1000 == 0) {print(paste0(pathwayNum,"/",ncol(filtered_data)))}
pval[[pathwayNum]] <- data.frame(pathway,pval=wilcox.test(filtered_data[,pathway]~meta[i,factor_to_test])$p.value)
}
pval.df <- as.data.frame(do.call(rbind,pval))
if (write_new_file) {
fwrite(pval.df,paste0(path_to_outputDir,"/",dataType,'/',analysisType,direc_addon,'/mann_whitney.txt'),quote = F,na = "NA",sep = '\t',row.names = F,col.names = T)
}
return(pval.df)
}
######################################################################
#
# PERFORM THE STATISTICAL ANALYSIS
#
######################################################################
path_to_outputDir.old <- path_to_outputDir
lookup_table = lookup_table.all[["EC"]]
factor_to_test_to_use="Visit_Number"
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)","PF-06651600 70 mg (Induction)","PF-06651600 20 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="R" & !is.na(meta[,factor_to_test_to_use])
# i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="NR" & !is.na(meta[,factor_to_test_to_use])
pathway_to_use="pathway212"
g1 = create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
g1
lookup_table = lookup_table.all[["EC"]]
factor_to_test_to_use="Visit_Number"
i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)","PF-06651600 70 mg (Induction)","PF-06651600 20 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="R" & !is.na(meta[,factor_to_test_to_use])
# i <- meta$Induction_treatment %in% c("PF-06651600 200 mg (Induction)") & meta$Regime !="Placebo" & meta$EI=="NR" & !is.na(meta[,factor_to_test_to_use])
pathway_to_use="pathway1150"
g1 = create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
pathway_to_use="pathway2784"
g2=create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
pathway_to_use="pathway843"
g3 = create_new_plot(as.data.frame(dat1[i,]),meta[i,],factor_to_test=factor_to_test_to_use,pathway=pathway_to_use)
library(cowplot)
plot_grid(g1,g2,g3,ncol=3)
metadata_to_use$environment
metadata_to_use$environment
library(data.table)
library(data.table)
?ks.test
?rpoisson
?rpois
X=500
Y=400
X=400
Y=500
qpois(400,500)
qpois(500,400)
qpois(4,5)
qpois(.4,5)
dpois(400,500)
ppois(400,500)
ppois(500,500)
ppois(501,500)
ppois(510,500)
ppois(1510,500)
ppois(500,500)
rpois(1000,500)
mean(500 > rpois(1000,500))
mean(500 > rpois(1000,500))
mean(500 > rpois(1000,500))
mean(500 > rpois(1000,500))
mean(500 > rpois(1000,500))
mean(500 > rpois(1000,500))
library(data.table)
library(ggplot2)
library(cowplot)
library(reshape2)
df1.full.p <- fread("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names_downsamp/DownSyndrome.HSCs_MPPs.sample.permALL.p.txt",data.table = F,stringsAsFactors = F)
df1.full.fdr <- fread("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names_downsamp/DownSyndrome.HSCs_MPPs.sample.permALL.fdr.txt",data.table = F,stringsAsFactors = F)
df1.full.lfc <- fread("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names_downsamp/DownSyndrome.HSCs_MPPs.sample.permALL.lfc.txt",data.table = F,stringsAsFactors = F)
gene_names="GATA1"
gene_names="APOC1"
gene_names=c("GATA1","APOC1","MYL4","DANT2","CERS5")
glist <- list(); dflst <- list()
M=100
df1.full.p$medP <- apply(df1.full.p[,paste0("sim",1:M)],1,median)
df1.full.p$adj.P.Val.t21 <- df1.full.fdr$adj.P.Val.t21
df1.full.p$adj.P.Val.h <- df1.full.fdr$adj.P.Val.h
df1.full.p$class <- "none"
df1.full.p$class[df1.full.p$adj.P.Val.t21 < 0.05 | df1.full.p$adj.P.Val.h < 0.05] <- "unknown"
df1.full.p$class[df1.full.p$adj.P.Val.t21 < 0.05 & df1.full.p$P.Value.h < 0.05] <- "environment-driven"
df1.full.p$class[df1.full.p$adj.P.Val.h < 0.05 & df1.full.p$P.Value.t21 < 0.05] <- "environment-driven"
df1.full.p$class[df1.full.p$adj.P.Val.t21 < 0.05 & df1.full.p$medP < 0.05 & df1.full.p$P.Value.h >= 0.05] <- "t21-induced"
df1.full.p$class[df1.full.p$adj.P.Val.h < 0.05 & df1.full.p$P.Value.t21 >= 0.05] <- "t21-reverted"
table(df1.full.p$class)
table(subset(df1.full.p,adj.P.Val.t21<0.05)$class)
table(subset(df1.full.p,adj.P.Val.h<0.05)$class)
tab <- table(subset(df1.full.p,class != "none")$class)
pct <- round(tab/sum(tab)*100,1)
pie(tab,labels=paste0(names(tab)," (",unname(tab),', ',unname(pct),"%)"),radius = 1,col = c("purple", "violetred1", "green3","cornsilk"))
117+66
787/(183+787)
183/(787+183)
787+183
table(df1.full.p$class)
66+114+3+787
# df1.full.mg <- merge(df1.full.p,df1.full.lfc[,c("names","logFC.t21")],by='names')
df1.full.mg <- merge(df1.full.p,df1.full.lfc[,c("names","logFC.t21","logFC.h")],by='names')
dbs <- c("GO_Molecular_Function_2021", "GO_Biological_Process_2021","ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X")
# gene_lst <- subset(df1.full.p,class=="environment-driven")$names#
gene_lst <- subset(df1.full.mg,class=="t21-induced" & logFC.t21 > 0)$names
# gene_lst <- subset(df1.full.mg,class=="t21-induced" & logFC.t21 < 0)$names
# gene_lst <- subset(df1.full.p,class=="t21-induced")$names
# gene_lst <- subset(df1.full.p,class=="t21-induced" & chromosome_name != 21)$names
# subset(df1.full.p,class=="t21-reverted")$names
enriched <- enrichr(gene_lst, dbs)
library(enrichR)
library("enrichR")
# df1.full.mg <- merge(df1.full.p,df1.full.lfc[,c("names","logFC.t21")],by='names')
df1.full.mg <- merge(df1.full.p,df1.full.lfc[,c("names","logFC.t21","logFC.h")],by='names')
dbs <- c("GO_Molecular_Function_2021", "GO_Biological_Process_2021","ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X")
# gene_lst <- subset(df1.full.p,class=="environment-driven")$names#
gene_lst <- subset(df1.full.mg,class=="t21-induced" & logFC.t21 > 0)$names
# gene_lst <- subset(df1.full.mg,class=="t21-induced" & logFC.t21 < 0)$names
# gene_lst <- subset(df1.full.p,class=="t21-induced")$names
# gene_lst <- subset(df1.full.p,class=="t21-induced" & chromosome_name != 21)$names
# subset(df1.full.p,class=="t21-reverted")$names
enriched <- enrichr(gene_lst, dbs)
y <- enriched[[dbs[1]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>3 & Adjusted.P.value<0.1))$Term
y <- enriched[[dbs[1]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
y <- enriched[[dbs[2]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
y <- enriched[[dbs[3]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
y <- enriched[[dbs[1]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
subset(df1.full.p,names=="BTG3")
y <- enriched[[dbs[1]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
# df1.full.mg <- merge(df1.full.p,df1.full.lfc[,c("names","logFC.t21")],by='names')
df1.full.mg <- merge(df1.full.p,df1.full.lfc[,c("names","logFC.t21","logFC.h")],by='names')
subset(df1.full.mg,names=="BTG3")
y <- enriched[[dbs[1]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
y <- enriched[[dbs[2]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
y <- enriched[[dbs[3]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
# gene_lst <- subset(df1.full.p,class=="environment-driven")$names#
# gene_lst <- subset(df1.full.mg,class=="t21-induced" & logFC.t21 > 0)$names
gene_lst <- subset(df1.full.mg,class=="t21-induced" & logFC.t21 < 0)$names
# gene_lst <- subset(df1.full.p,class=="t21-induced")$names
# gene_lst <- subset(df1.full.p,class=="t21-induced" & chromosome_name != 21)$names
# subset(df1.full.p,class=="t21-reverted")$names
enriched <- enrichr(gene_lst, dbs)
y <- enriched[[dbs[1]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
y <- enriched[[dbs[2]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
y <- enriched[[dbs[3]]]; y$geneCt <- as.numeric(gsub("\\/[0-9]*","",y[,'Overlap'],fixed=F)); (subset(y,geneCt>=3 & Adjusted.P.value<0.1))$Term
cc.genes
DEG_comparison_chr21_v_notchr21 <- function(sampletype) {
res.df.all.p <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.fdr.txt"),data.table = F,stringsAsFactors=F)
res.df.all.lfc <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.lfc.txt"),data.table = F,stringsAsFactors = F)
cell_type_groups <- colnames(res.df.all.p)[(which(colnames(res.df.all.p)=="names")+1):(which(colnames(res.df.all.p)=="chromosome_name")-1)]
x <- res.df.all.p
# x <- aggregate(res.df.all.p[,cell_type_groups]<0.1,by=list(chr21=res.df.all.lfc$chromosome_name==21),mean,na.rm=T)
x <- aggregate(res.df.all.p[,cell_type_groups]<0.05,by=list(chr21=res.df.all.lfc$chromosome_name==21),mean,na.rm=T)
rownames(x) <- x[,1]; x <- x[,-1]; x <- as.data.frame(t(x))
colnames(x) <- c("Not Chr 21","Chr 21")
ggplot(x,aes(x=100*`Chr 21`,y=100*`Not Chr 21`)) +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank(),
plot.title=element_text(hjust=0.5)) +
geom_smooth(method='loess',span=3,se=F,col='purple') +
labs(x="% DEG per cell type (chr 21)",y="% DEG per cell type (not chr 21)",title=paste0(sampletype))
}
DEG_comparison_chr21_v_notchr21("Liver")
DEG_comparison_chr1_v_notchr1 <- function(sampletype) {
res.df.all.p <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.fdr.txt"),data.table = F,stringsAsFactors=F)
res.df.all.lfc <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.lfc.txt"),data.table = F,stringsAsFactors = F)
cell_type_groups <- colnames(res.df.all.p)[(which(colnames(res.df.all.p)=="names")+1):(which(colnames(res.df.all.p)=="chromosome_name")-1)]
x <- res.df.all.p
# x <- aggregate(res.df.all.p[,cell_type_groups]<0.1,by=list(chr21=res.df.all.lfc$chromosome_name==21),mean,na.rm=T)
x <- aggregate(res.df.all.p[,cell_type_groups]<0.05,by=list(chr21=res.df.all.lfc$chromosome_name==1),mean,na.rm=T)
rownames(x) <- x[,1]; x <- x[,-1]; x <- as.data.frame(t(x))
colnames(x) <- c("Not Chr 21","Chr 21")
ggplot(x,aes(x=100*`Chr 21`,y=100*`Not Chr 21`)) +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank(),
plot.title=element_text(hjust=0.5)) +
geom_smooth(method='loess',span=3,se=F,col='purple') +
labs(x="% DEG per cell type (chr 21)",y="% DEG per cell type (not chr 21)",title=paste0(sampletype))
}
DEG_comparison_chr21_v_notchr21("Liver")
DEG_comparison_chr1_v_notchr1("Liver")
DEG_comparison_chr1_v_notchr1("Femur")
DEG_comparison_chrX_v_notchrX <- function(sampletype,chrNum) {
res.df.all.p <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.fdr.txt"),data.table = F,stringsAsFactors=F)
res.df.all.lfc <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.lfc.txt"),data.table = F,stringsAsFactors = F)
cell_type_groups <- colnames(res.df.all.p)[(which(colnames(res.df.all.p)=="names")+1):(which(colnames(res.df.all.p)=="chromosome_name")-1)]
x <- res.df.all.p
# x <- aggregate(res.df.all.p[,cell_type_groups]<0.1,by=list(chr21=res.df.all.lfc$chromosome_name==21),mean,na.rm=T)
x <- aggregate(res.df.all.p[,cell_type_groups]<0.05,by=list(chr21=res.df.all.lfc$chromosome_name==chrNum),mean,na.rm=T)
rownames(x) <- x[,1]; x <- x[,-1]; x <- as.data.frame(t(x))
colnames(x) <- c("Not Chr 21","Chr 21")
ggplot(x,aes(x=100*`Chr 21`,y=100*`Not Chr 21`)) +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank(),
plot.title=element_text(hjust=0.5)) +
geom_smooth(method='loess',span=3,se=F,col='purple') +
labs(x="% DEG per cell type (chr 21)",y="% DEG per cell type (not chr 21)",title=paste0(sampletype))
}
DEG_comparison_chrX_v_notchrX("Liver",1)
DEG_comparison_chr1_v_notchr1("Femur",1)
DEG_comparison_chrX_v_notchrX("Liver",2)
DEG_comparison_chrX_v_notchrX("Liver",3)
DEG_comparison_chrX_v_notchrX("Liver",4)
DEG_comparison_chrX_v_notchrX("Liver",21)
DEG_comparison_chrX_v_notchrX("Liver",22)
DEG_comparison_chrX_v_notchrX("Liver",1)
DEG_comparison_chrX_v_notchrX <- function(sampletype,chrNum) {
res.df.all.p <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.fdr.txt"),data.table = F,stringsAsFactors=F)
res.df.all.lfc <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.lfc.txt"),data.table = F,stringsAsFactors = F)
cell_type_groups <- colnames(res.df.all.p)[(which(colnames(res.df.all.p)=="names")+1):(which(colnames(res.df.all.p)=="chromosome_name")-1)]
x <- res.df.all.p
# x <- aggregate(res.df.all.p[,cell_type_groups]<0.1,by=list(chr21=res.df.all.lfc$chromosome_name==21),mean,na.rm=T)
x <- aggregate(res.df.all.p[,cell_type_groups]<0.05,by=list(chr21=res.df.all.lfc$chromosome_name==chrNum),mean,na.rm=T)
rownames(x) <- x[,1]; x <- x[,-1]; x <- as.data.frame(t(x))
colnames(x) <- c("Not Chr 21","Chr 21")
return(ggplot(x,aes(x=100*`Chr 21`,y=100*`Not Chr 21`)) +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank(),
plot.title=element_text(hjust=0.5)) +
geom_smooth(method='loess',span=3,se=F,col='purple') +
labs(x="% DEG per cell type (chr 21)",y="% DEG per cell type (not chr 21)",title=paste0(sampletype)))
}
glst <- list()
for (i in 1:22) {
glst[[i]] <- DEG_comparison_chrX_v_notchrX("Liver",i)
}
# DEG_comparison_chr1_v_notchr1("Femur",1)
plot_grid(glst,ncol=4)
glst <- list()
for (i in 1:22) {
glst[[i]] <- DEG_comparison_chrX_v_notchrX("Liver",i)
}
?plot_grid
plot_grid(plotlist=glst,ncol=4)
DEG_comparison_chrX_v_notchrX <- function(sampletype,chrNum) {
res.df.all.p <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.fdr.txt"),data.table = F,stringsAsFactors=F)
res.df.all.lfc <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.lfc.txt"),data.table = F,stringsAsFactors = F)
cell_type_groups <- colnames(res.df.all.p)[(which(colnames(res.df.all.p)=="names")+1):(which(colnames(res.df.all.p)=="chromosome_name")-1)]
x <- res.df.all.p
# x <- aggregate(res.df.all.p[,cell_type_groups]<0.1,by=list(chr21=res.df.all.lfc$chromosome_name==21),mean,na.rm=T)
x <- aggregate(res.df.all.p[,cell_type_groups]<0.05,by=list(chr21=res.df.all.lfc$chromosome_name==chrNum),mean,na.rm=T)
rownames(x) <- x[,1]; x <- x[,-1]; x <- as.data.frame(t(x))
colnames(x) <- c("Not Chr 21","Chr 21")
return(ggplot(x,aes(x=100*`Chr 21`,y=100*`Not Chr 21`)) +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank(),
plot.title=element_text(hjust=0.5)) +
geom_smooth(method='loess',span=3,se=F,col='purple') +
labs(x=paste0("% DEG per cell type (chr ",X),y=paste0("% DEG per cell type (not chr ",X),title=paste0(sampletype)))
}
glst <- list()
for (i in 1:22) {
glst[[i]] <- DEG_comparison_chrX_v_notchrX("Liver",i)
}
plot_grid(plotlist=glst,ncol=4)
# DEG_comparison_chr1_v_notchr1("Femur",1)
DEG_comparison_chrX_v_notchrX <- function(sampletype,chrNum) {
res.df.all.p <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.fdr.txt"),data.table = F,stringsAsFactors=F)
res.df.all.lfc <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.lfc.txt"),data.table = F,stringsAsFactors = F)
cell_type_groups <- colnames(res.df.all.p)[(which(colnames(res.df.all.p)=="names")+1):(which(colnames(res.df.all.p)=="chromosome_name")-1)]
x <- res.df.all.p
# x <- aggregate(res.df.all.p[,cell_type_groups]<0.1,by=list(chr21=res.df.all.lfc$chromosome_name==21),mean,na.rm=T)
x <- aggregate(res.df.all.p[,cell_type_groups]<0.05,by=list(chr21=res.df.all.lfc$chromosome_name==chrNum),mean,na.rm=T)
rownames(x) <- x[,1]; x <- x[,-1]; x <- as.data.frame(t(x))
colnames(x) <- c("Not Chr 21","Chr 21")
return(ggplot(x,aes(x=100*`Chr 21`,y=100*`Not Chr 21`)) +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank(),
plot.title=element_text(hjust=0.5)) +
geom_smooth(method='loess',span=3,se=F,col='purple') +
labs(x=paste0("% DEG per cell type (chr ",chrNum),y=paste0("% DEG per cell type (not chr ",chrNum),title=paste0(sampletype)))
}
glst <- list()
for (i in 1:22) {
glst[[i]] <- DEG_comparison_chrX_v_notchrX("Liver",i)
}
plot_grid(plotlist=glst,ncol=4)
# DEG_comparison_chr1_v_notchr1("Femur",1)
DEG_comparison_chrX_v_notchrX <- function(sampletype,chrNum) {
res.df.all.p <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.fdr.txt"),data.table = F,stringsAsFactors=F)
res.df.all.lfc <- fread(paste0("/Users/andrewmarderstein/Documents/Research/t21-proj/out/full/DE_pb_leiden_names/res.",sampletype,".FE.lfc.txt"),data.table = F,stringsAsFactors = F)
cell_type_groups <- colnames(res.df.all.p)[(which(colnames(res.df.all.p)=="names")+1):(which(colnames(res.df.all.p)=="chromosome_name")-1)]
x <- res.df.all.p
# x <- aggregate(res.df.all.p[,cell_type_groups]<0.1,by=list(chr21=res.df.all.lfc$chromosome_name==21),mean,na.rm=T)
x <- aggregate(res.df.all.p[,cell_type_groups]<0.05,by=list(chr21=res.df.all.lfc$chromosome_name==chrNum),mean,na.rm=T)
rownames(x) <- x[,1]; x <- x[,-1]; x <- as.data.frame(t(x))
colnames(x) <- c("Not Chr 21","Chr 21")
return(ggplot(x,aes(x=100*`Chr 21`,y=100*`Not Chr 21`)) +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank(),
plot.title=element_text(hjust=0.5)) +
geom_smooth(method='loess',span=3,se=F,col='purple') +
labs(x=paste0("% DEG per cell type (chr ",chrNum,")"),y=paste0("% DEG per cell type (not chr ",chrNum,")"),title=paste0(sampletype)))
}
glst <- list()
for (i in 1:22) {
glst[[i]] <- DEG_comparison_chrX_v_notchrX("Liver",i)
}
plot_grid(plotlist=glst,ncol=4)
# DEG_comparison_chr1_v_notchr1("Femur",1)
library(data.table)
dirEXPRESSION <- "/oak/stanford/groups/smontgom/amarder/data/GTEx" # modify as needed
inputEXPRESSIONfile <- "GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_tpm.gct.gz"
# directories: requires path to CIBERSORT R script. need to request from https://cibersort.stanford.edu
mixture.file <- paste0(dirEXPRESSION,'/',inputEXPRESSIONfile)
mixture.file
mart <- useMart('ENSEMBL_MART_ENSEMBL', host = 'www.ensembl.org')
